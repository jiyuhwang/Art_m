<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="User"><!-- namespace - 클래스명과 동일 -->
	<!-- id - 메소드명과 동일 -->
	<!-- resultType : row 1줄의 형태를 지정 -->
	<!-- 쿼리 작성 시 ;이 들어가면 실행되지 않음 -->
	
	<!-- 회원 등록 -->
	<insert id="addUser" parameterType="hashmap">
		INSERT INTO USERS(USER_NO, USER_ID, USER_NICKNAME, PW, NAME, SEX, BIRTHDAY, PHONE_NO, MAIL, MAIL_CERTIFICATE, EVENT_AGREEMENT)
		VALUES(USERS_SEQ.NEXTVAL, #{userId}, #{userNickname}, #{userPw}, #{userName}, #{gender}, #{birthYear}||'-'||#{birthMonth}||'-'||#{birthDay}, #{userPhone}, #{userMail}, #{userMailCheck}, #{eventAgree})
	</insert>
	
	<!-- 아이디 중복 체크 -->
	<select id="idCheck" parameterType="hashmap" resultType="Integer">
      SELECT COUNT(*)
      FROM USERS
      WHERE USER_ID = #{userId}
	</select>
	
	<!-- 닉네임 중복 체크 -->
	<select id="nicknameCheck" parameterType="hashmap" resultType="Integer">
      SELECT COUNT(*)
      FROM USERS
      WHERE USER_NICKNAME = #{userNickname}
	</select>
	
	<!-- 로그인 시 회원정보 가져오기 -->
	<select id="getUser" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO, USER_ID, USER_NICKNAME, PW, PROFILE_IMG_PATH, NAME, SEX, BIRTHDAY, PHONE_NO, MAIL, INTRODUCE, EVENT_AGREEMENT
		FROM USERS
		WHERE USER_ID = #{userId}
		AND PW = #{userPw}
		AND OUT_DATE IS NULL
	</select>
	
	<!-- 로그인 시 관리자정보 가져오기 -->
	<select id="getAdmin" parameterType="hashmap" resultType="hashmap">
		SELECT ADMIN_NO, ADMIN_ID, NAME, PW
		FROM ADMINISTRATOR
		WHERE ADMIN_ID = #{userId}
		AND PW = #{userPw}
		AND DEL = 1
	</select>
	
	<!-- 프로필 수정 -->
	<update id="updateProfile" parameterType="hashmap">
		UPDATE USERS SET PROFILE_IMG_PATH = #{profileImg}, USER_NICKNAME = #{userNickname}, INTRODUCE = #{userIntroduce}
		WHERE USER_NO = #{userNo}
	</update>
	
	<!--비밀번호 수정 -->
	<update id="editPw" parameterType="hashmap">
		UPDATE USERS SET PW = #{userPw}
		WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 개인정보 수정 -->
	<update id="updateSet" parameterType="hashmap">
		UPDATE USERS SET NAME = #{userName}, BIRTHDAY = #{birthYear}||'-'||#{birthMonth}||'-'||#{birthDay}, PHONE_NO = #{userPhone}, SEX = #{gender}, MAIL = #{userMail}, EVENT_AGREEMENT = #{userEventAgree}
		WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 개인정보 가져오기 -->
	<select id="getUser2" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO, USER_ID, USER_NICKNAME, PW, PROFILE_IMG_PATH, NAME, SEX, BIRTHDAY, PHONE_NO, MAIL, INTRODUCE, EVENT_AGREEMENT
		FROM USERS
		WHERE USER_NO = #{userNo}
	</select>

	<!-- 탈퇴하기 -->
	<update id="outUser" parameterType="hashmap">
		UPDATE USERS SET OUT_DATE = SYSDATE
		WHERE USER_NO = #{userNo}
	</update>
	
	<!-- 아이디 찾기 -->
	<select id="idFind" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO, USER_ID, USER_NICKNAME, PW
		FROM USERS
		WHERE NAME = #{userName}
		AND MAIL = #{userMail}
		AND OUT_DATE IS NULL
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="pwFind" parameterType="hashmap" resultType="hashmap">
		SELECT USER_NO, USER_ID, USER_NICKNAME, PW
		FROM USERS
		WHERE USER_ID = #{userId}
		AND MAIL = #{userMail}
		AND OUT_DATE IS NULL
	</select>
	
	<!-- 임시 비밀번호 등록  -->
	<update id="updatePw" parameterType="hashmap">
		UPDATE USERS SET PW = #{pw}
		WHERE USER_ID = #{userId}
	</update>
	
	<!-- 나의 작품 신고내역 -->
	<select id="reportPost" parameterType="hashmap" resultType="hashmap">		        
		SELECT R.REPORT_NO, R.TYPE_NAME, R.POST_NO, R.USER_NICKNAME, R.USER_NO, R.CONTENTS, R.REPORT_STATUS, R.REGISTER_DATE, R.DEL
		FROM (SELECT R1.REPORT_NO, R1.POST_NO, R2.TYPE_NAME, U.USER_NICKNAME, R1.USER_NO, R1.CONTENTS, R1.REPORT_STATUS, TO_CHAR(R1.REGISTER_DATE, 'YYYY-MM-DD') AS REGISTER_DATE, P.DEL,
		                ROW_NUMBER() OVER(ORDER BY R1.REGISTER_DATE DESC) AS RNUM
		        FROM REPORT R1 INNER JOIN (SELECT R1.REPORT_NO, LISTAGG(R2.TYPE_NAME2, ',') WITHIN GROUP(ORDER BY R2.TYPE_NO) AS TYPE_NAME
		                                    FROM REPORT_REPORT_TYPE R1 LEFT OUTER JOIN REPORT_TYPE R2
		                                                ON R1.TYPE_NO = R2.TYPE_NO
		                                    GROUP BY R1.REPORT_NO) R2
		                    ON R1.REPORT_NO = R2.REPORT_NO
		                        INNER JOIN POST P
		                    ON R1.POST_NO = P.POST_NO
		                        INNER JOIN USERS U
		                    ON P.USER_NO = U.USER_NO
		        WHERE R1.USER_NO = #{userNo}
		        AND R1.POST_NO IS NOT NULL
		        AND R1.DEL = 1) R
		WHERE R.RNUM BETWEEN #{startCnt} AND #{endCnt}
	</select>
	
	
	<!-- 나의 댓글 신고내역 -->
	<select id="reportComment" parameterType="hashmap" resultType="hashmap">
		SELECT R.REPORT_NO, R.TYPE_NAME, R.POST_NO, R.USER_NICKNAME, R.USER_NO, R.COMMENT_NO, R.CONTENTS, R.REPORT_STATUS, R.REGISTER_DATE, R.DEL, R.DEL2
		FROM (SELECT R1.REPORT_NO, P.POST_NO, R2.TYPE_NAME, U.USER_NICKNAME, R1.COMMENT_NO, R1.USER_NO, R1.CONTENTS, R1.REPORT_STATUS, TO_CHAR(R1.REGISTER_DATE, 'YYYY-MM-DD') AS REGISTER_DATE, P.DEL, C.DEL AS DEL2,
		                ROW_NUMBER() OVER(ORDER BY R1.REGISTER_DATE DESC) AS RNUM
		        FROM REPORT R1 INNER JOIN (SELECT R1.REPORT_NO, LISTAGG(R2.TYPE_NAME2, ',') WITHIN GROUP(ORDER BY R2.TYPE_NO) AS TYPE_NAME
		                                    FROM REPORT_REPORT_TYPE R1 LEFT OUTER JOIN REPORT_TYPE R2
		                                                ON R1.TYPE_NO = R2.TYPE_NO
		                                    GROUP BY R1.REPORT_NO) R2
		                    ON R1.REPORT_NO = R2.REPORT_NO
		                        INNER JOIN COMMENTS C
		                    ON R1.COMMENT_NO = C.COMMENT_NO
		                        INNER JOIN POST P
		                    ON C.POST_NO = P.POST_NO
		                        INNER JOIN USERS U
		                    ON C.USER_NO = U.USER_NO
		        WHERE R1.USER_NO = #{userNo}
		        AND R1.COMMENT_NO IS NOT NULL
		        AND R1.DEL = 1) R
		WHERE R.RNUM BETWEEN #{startCnt} AND #{endCnt}
	</select>
	
	<!-- 나의 신고 내역 삭제 -->
	<update id="deleteMyReport" parameterType="hashmap">
		UPDATE REPORT SET DEL = 0
		WHERE REPORT_NO = #{reportNo}
	</update>
	
	<!-- 나의 신고 내역 철회 -->
	<update id="changeMyReport" parameterType="hashmap">
		UPDATE REPORT SET REPORT_STATUS = 1
		WHERE REPORT_NO = #{reportNo}
	</update>
	
	<!-- 나의 작품 신고 내역 수 -->
	<select id="getMyReportPostCnt" parameterType="hashmap" resultType="Integer">
     	SELECT COUNT(*)
		FROM REPORT
		WHERE USER_NO = #{userNo}
		AND POST_NO IS NOT NULL
	</select>
	
	<!-- 나의 댓글 신고 내역 수 -->
	<select id="getMyReportCommentCnt" parameterType="hashmap" resultType="Integer">
     	SELECT COUNT(*)
		FROM REPORT
		WHERE USER_NO = #{userNo}
		AND COMMENT_NO IS NOT NULL
	</select>
	
	<!-- 현재 비밀번호 체크 -->
	<select id="pwCheck" parameterType="hashmap" resultType="Integer">
		SELECT COUNT(*)
		FROM USERS
		WHERE USER_NO = #{userNo}
		AND PW = #{userPw2}
	</select>
	


</mapper>